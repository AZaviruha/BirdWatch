// Compiled by ClojureScript 0.0-2173
goog.provide('cljs_om.wordcount');
goog.require('cljs.core');
goog.require('clojure.string');
goog.require('clojure.string');
cljs_om.wordcount.stop_words = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 202, ["new",null,"into",null,"yours",null,"again",null,"a",null,"could",null,"hasn't",null,"were",null,"than",null,"all",null,"no",null,"against",null,"each",null,"during",null,"once",null,"but",null,"both",null,"herself",null,"down",null,"doesn't",null,"rt",null,"won't",null,"be",null,"cannot",null,"don",null,"or",null,"these",null,"most",null,"amp",null,"further",null,"there",null,"what",null,"having",null,"in",null,"they'd",null,"through",null,"same",null,"with",null,"when's",null,"because",null,"themselves",null,"one",null,"wouldn't",null,"i'd",null,"own",null,"let's",null,"where",null,"use",null,"that",null,"such",null,"ours",null,"aren't",null,"between",null,"http",null,"its",null,"have",null,"says",null,"they",null,"you'll",null,"shouldn't",null,"we've",null,"why",null,"i",null,"for",null,"he's",null,"was",null,"said",null,"is",null,"who's",null,"he'll",null,"from",null,"we'd",null,"do",null,"it",null,"had",null,"say",null,"am",null,"been",null,"just",null,"my",null,"any",null,"we're",null,"shall",null,"our",null,"him",null,"only",null,"those",null,"i've",null,"ought",null,"an",null,"she'd",null,"about",null,"via",null,"they've",null,"we",null,"out",null,"whom",null,"off",null,"shan't",null,"i'm",null,"how",null,"she",null,"don't",null,"want",null,"whose",null,"there's",null,"what's",null,"other",null,"hadn't",null,"can",null,"here",null,"below",null,"the",null,"isn't",null,"nor",null,"while",null,"as",null,"they're",null,"wasn't",null,"mustn't",null,"his",null,"will",null,"at",null,"your",null,"where's",null,"that's",null,"should",null,"not",null,"haven't",null,"over",null,"some",null,"too",null,"are",null,"why's",null,"would",null,"her",null,"more",null,"very",null,"now",null,"get",null,"ourselves",null,"by",null,"til",null,"you've",null,"she'll",null,"of",null,"and",null,"itself",null,"doing",null,"like",null,"it's",null,"himself",null,"me",null,"under",null,"myself",null,"few",null,"gonna",null,"theirs",null,"we'll",null,"does",null,"weren't",null,"their",null,"couldn't",null,"upon",null,"has",null,"he'd",null,"when",null,"you're",null,"let",null,"to",null,"up",null,"here's",null,"didn't",null,"how's",null,"you'd",null,"after",null,"she's",null,"them",null,"so",null,"good",null,"he",null,"can't",null,"if",null,"which",null,"then",null,"yourselves",null,"above",null,"htt\u2026",null,"us",null,"this",null,"i'll",null,"until",null,"who",null,"&amp",null,"hers",null,"you",null,"did",null,"being",null,"they'll",null,"on",null,"yourself",null,"before",null], null), null);
cljs_om.wordcount.add_word = (function add_word(app,word){var prev_count_6509 = cljs.core.get.call(null,new cljs.core.Keyword(null,"words","words",1127222811).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null,app)),word);cljs.core.swap_BANG_.call(null,app,cljs.core.assoc,new cljs.core.Keyword(null,"words-sorted-by-count","words-sorted-by-count",4739523959),cljs.core.disj.call(null,new cljs.core.Keyword(null,"words-sorted-by-count","words-sorted-by-count",4739523959).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null,app)),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"key","key",1014010321),word,new cljs.core.Keyword(null,"value","value",1125876963),prev_count_6509], null)));
cljs.core.swap_BANG_.call(null,app,cljs.core.assoc_in,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"words","words",1127222811),word], null),(cljs.core.get.call(null,new cljs.core.Keyword(null,"words","words",1127222811).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null,app)),word) + 1));
cljs.core.swap_BANG_.call(null,app,cljs.core.assoc,new cljs.core.Keyword(null,"words-sorted-by-count","words-sorted-by-count",4739523959),cljs.core.conj.call(null,new cljs.core.Keyword(null,"words-sorted-by-count","words-sorted-by-count",4739523959).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null,app)),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"key","key",1014010321),word,new cljs.core.Keyword(null,"value","value",1125876963),(prev_count_6509 + 1)], null)));
return word;
});
cljs_om.wordcount.process_tweet = (function process_tweet(app,text){return cljs.core.doall.call(null,cljs.core.map.call(null,(function (p1__6514_SHARP_){return cljs_om.wordcount.add_word.call(null,app,p1__6514_SHARP_);
}),cljs.core.filter.call(null,(function (item){return !(cljs.core.contains_QMARK_.call(null,cljs_om.wordcount.stop_words,item));
}),cljs.core.map.call(null,(function (p1__6513_SHARP_){return clojure.string.replace.call(null,p1__6513_SHARP_,/[;:,\/‘’…~\-!?#<>()\"@.]+/,"");
}),cljs.core.map.call(null,clojure.string.lower_case,cljs.core.filter.call(null,(function (p1__6512_SHARP_){return (cljs.core.count.call(null,p1__6512_SHARP_) < 25);
}),cljs.core.filter.call(null,(function (p1__6511_SHARP_){return (cljs.core.count.call(null,p1__6511_SHARP_) > 3);
}),cljs.core.filter.call(null,(function (p1__6510_SHARP_){return cljs.core.not.call(null,cljs.core.re_find.call(null,/(@|https?:)/,p1__6510_SHARP_));
}),clojure.string.split.call(null,text,/[\s—\u3031-\u3035\u0027\u309b\u309c\u30a0\u30fc\uff70]+/)))))))));
});

//# sourceMappingURL=wordcount.js.map